(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{165:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"metadata",(function(){return l})),a.d(n,"rightToc",(function(){return s})),a.d(n,"default",(function(){return c}));var t=a(1),r=a(9),o=(a(0),a(177)),i={id:"usage",title:"Usage",sidebar_label:"Usage"},l={id:"usage",title:"Usage",description:"## Creating a Table to store data",source:"@site/docs/Usage.md",permalink:"/docs/usage",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/Usage.md",sidebar_label:"Usage",sidebar:"docs",next:{title:"React + Datalog",permalink:"/docs/react"}},s=[{value:"Creating a Table to store data",id:"creating-a-table-to-store-data",children:[]},{value:"Adding data",id:"adding-data",children:[]},{value:"Removing data",id:"removing-data",children:[]},{value:"Querying data",id:"querying-data",children:[]},{value:"Querying data \u2013 With Joins",id:"querying-data--with-joins",children:[]},{value:"Querying data with Anti-Joins",id:"querying-data-with-anti-joins",children:[]},{value:"Differential Updates",id:"differential-updates",children:[]}],d={rightToc:s};function c(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},d,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"creating-a-table-to-store-data"},"Creating a Table to store data"),Object(o.b)("p",null,"This is analogous to a database table. To create a table call ",Object(o.b)("inlineCode",{parentName:"p"},"datalog.newTable<T>(schema: Schema)"),". Bonus points for adding types to your schema."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import * as datalog from '@datalogui/datalog'\n\nconst People = datalog.newTable<{id: number, name: string}>({\n  id: datalog.NumberType,\n  name: datalog.StringType,\n})\n")),Object(o.b)("h2",{id:"adding-data"},"Adding data"),Object(o.b)("p",null,"Add data to the table with ",Object(o.b)("inlineCode",{parentName:"p"},"table.assert(datum: T)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'People.assert({id: 0, name: "Alice"})\nPeople.assert({id: 1, name: "Bob"})\n')),Object(o.b)("h2",{id:"removing-data"},"Removing data"),Object(o.b)("p",null,"Remove data from the table with ",Object(o.b)("inlineCode",{parentName:"p"},"table.retract(datum: T)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'People.retract({id: 1, name: "Bob"})\n')),Object(o.b)("h2",{id:"querying-data"},"Querying data"),Object(o.b)("p",null,"Query data from the table with the ",Object(o.b)("inlineCode",{parentName:"p"},"datalog.query")," function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'\n// Builds the structure of the query\nconst Query = datalog.query<{name: string}>(({name}) => {\n  People({name})\n})\n\n// Read the values of the query by creating a view into it\nQuery.view().readAllData()\n// => [{ name: "Alice" }]\n\n')),Object(o.b)("h2",{id:"querying-data--with-joins"},"Querying data \u2013 With Joins"),Object(o.b)("p",null,"Let's try a more complex example. How about listing every person's name and their manager's name."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'// ... People table is same as before\n\ntype ID = number\nconst Manages = datalog.newTable<{manager: ID, managee: ID}>({\n  manager: datalog.NumberType,\n  managee: datalog.NumberType,\n})\n\n// Find everyone who has a manager, and return their name and their manager\'s name\ndatalog.query<{\n  managerName: string,\n  personName: string,\n  personID: number,\n  managerID: number\n}>(({managerName, personName, managerID, personID}) => {\n  People({id: personID, name: personName})\n  Manages({managee: personID, manager: managerID})\n  People({id: managerID, name: managerName})\n})\n\nQuery.view().readAllData()\n// =>\n/*\n  [{\n      managerID: 0,\n      managerName: "Alice",\n      personID: 1,\n      personName: "Bob",\n  }]\n*/\n\n')),Object(o.b)("h2",{id:"querying-data-with-anti-joins"},"Querying data with Anti-Joins"),Object(o.b)("p",null,"It's also possible to say that something should not exist. This is declared with the ",Object(o.b)("inlineCode",{parentName:"p"},".not")," method on tables inside queries. For example, let's find out who does not have a manager."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'const Query = datalog.query<{ personID: number, personName: string }>(\n  ({ personName, personID }) => {\n    People({ id: personID })\n    // Here we say: Only find personID for which this condition does `not`\n    // hold. i.e. Find a personID such that there is\n    // not a {managee: personID} datum inside the Manages table.\n    Manages.not({ managee: personID })\n})\n\nQuery.view().readAllData()\n/*\n[{\n    personID: 0,\n    personName: "Alice",\n}]\n*/\n')),Object(o.b)("h2",{id:"differential-updates"},"Differential Updates"),Object(o.b)("p",null,"This Datalog implementation works off of differences. When you run a query, it doesn't run the query over the whole dataset every time. It only runs the query on new data. Let's see an example"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'// Create our People table as before\nconst People = datalog.newTable<{ id: number, name: string }>({\n    id: datalog.NumberType,\n    name: datalog.StringType,\n})\n\nPeople.assert({ id: 0, name: "Alice" })\nconst Query = datalog.query<{ name: string }>(({ name }) => {\n    People({ name })\n})\n\nconst queryView = Query.view()\n\n// Ask only for recent data\nqueryView.recentData()\n// =>\n/*\n    [{\n        kind: datalog.Added,\n        datum: { name: "Alice" }\n    }]\n*/\n\n// Nothing has changed so we get nothing back\nqueryView.recentData()\n// => null\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"recentData")," returns either null or any changes that happened on this view\nsince the last time you called ",Object(o.b)("inlineCode",{parentName:"p"},"recentData"),". Changes are either an addition of\na datum (represented by the ",Object(o.b)("inlineCode",{parentName:"p"},"datalog.Added")," symbol) or a removal of a datum\n(represented by the ",Object(o.b)("inlineCode",{parentName:"p"},"datalog.Removed")," symbol)."),Object(o.b)("p",null,"Let's continue the example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'People.assert({ id: 2, name: "Eve" })\nqueryView.recentData()\n// => null\n')),Object(o.b)("p",null,"Huh? What gives? Why did we get back null? It's because queries are a kind of\nlazy. Much like me, they won't do anything unless you ask them to. In this\ncase, we have to ask it to run the query again because we know the dependencies\n(The ",Object(o.b)("inlineCode",{parentName:"p"},"People")," table) have changed. Let's try that again."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'// People.assert({ id: 2, name: "Eve" }) // We did this already\n// Hey Query! go ahead and run yourself\nQuery.runQuery()\nqueryView.recentData()\n/* =>\n[{\n    kind: datalog.Added,\n    datum: { name: "Eve" }\n}]\n*/\n')),Object(o.b)("p",null,"That's better. We see the effect of our assertion in the People table reflected\nin the output of the query. But remembering to call ",Object(o.b)("inlineCode",{parentName:"p"},"runQuery()")," every time can\nbe annoying. Thankfully we can add a small change to have the query\nautomatically run when any of its dependencies change."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"Query.onDependencyChange(() => Query.runQuery())\n")),Object(o.b)("p",null,"Now what happens when we remove something from the People table?"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'People.retract({ id: 2, name: "Eve" })\n// Note: runQuery is omitted here because it\'s happening\n// automatically because we ran\n// Query.onDependencyChange(() => Query.runQuery())\n\nqueryView.recentData()\n// =>\n/*\n[{\n    kind: datalog.Removed,\n    datum: { name: "Eve" }\n}]\n*/\n\n')),Object(o.b)("p",null,"UIs don't change the whole state of the world very often. So it's much faster\nto run queries on differences rather than the full dataset every time. With DatalogUI, you get\nexpressive query syntax and good performance."))}c.isMDXComponent=!0},177:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),c=function(e){var n=r.a.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):l({},n,{},e)),a},u=function(e){var n=c(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=Object(t.forwardRef)((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),p=t,m=u["".concat(i,".").concat(p)]||u[p]||b[p]||o;return a?r.a.createElement(m,l({ref:n},d,{components:a})):r.a.createElement(m,l({ref:n},d))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);