(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{163:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return r})),a.d(n,"metadata",(function(){return l})),a.d(n,"rightToc",(function(){return s})),a.d(n,"default",(function(){return u}));var t=a(1),o=a(9),i=(a(0),a(174)),r=(a(234),{id:"simple-join",title:"Simple Join",sidebar_label:"Simple Join"}),l={id:"examples/simple-join",title:"Simple Join",description:"\x3c!-- import RKCodeBlock from '../../src/RunKitCodeBlock' --\x3e",source:"@site/docs/examples/simple-join.md",permalink:"/docs/examples/simple-join",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/examples/simple-join.md",sidebar_label:"Simple Join",sidebar:"docs",previous:{title:"React + Datalog",permalink:"/docs/react"},next:{title:"Terminology",permalink:"/docs/terminology"}},s=[],c={rightToc:s};function u(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},c,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Datalog allows you to express joins clearly and simply. You specify a join by\nreferencing the same variable in multiple places in a query. Let's look at the\nhello world join as an example."),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts",metastring:"live noInline",live:!0,noInline:!0}),'// Already in the browser\'s scope\n// import * as datalog from \'@datalogui/datalog\'\n// import { useQuery } from \'@datalogui/react\'\n\nconst Greetings = datalog.intoTable([\n  { language: "en", greeting: "Hello" },\n  { language: "es", greeting: "Hola" }\n  // ...\n])\nconst Nouns = datalog.intoTable([\n  { language: "en", noun: "world" },\n  { language: "es", noun: "todos" }\n  // ...\n])\n\nconst Greeting = () => {\n  const results = useQuery(({ greeting, noun }) => {\n    Greetings({ language: "en", greeting })\n    Nouns({ language: "en", noun })\n  })\n  return results.map(({greeting, noun}) => `${greeting} ${noun}`)\n}\n\nrender(<Greeting />)\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The examples here use React, but they would work equally well with most other UI\nframeworks."))),Object(i.b)("p",null,"A full working example above is nice, but let's zoom into the actual query part."),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'datalog.query(({ greeting, noun }) => {\n  Greetings({ language: "en", greeting })\n  Nouns({ language: "en", noun })\n})\n')),Object(i.b)("p",null,"In this query we are joining the datums from ",Object(i.b)("inlineCode",{parentName:"p"},"Greetings")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Nouns")," when their\nlanguage are both ",Object(i.b)("inlineCode",{parentName:"p"},'"en"'),". In case you're more familiar with SQL, this is\nanalogous to joining with a ",Object(i.b)("inlineCode",{parentName:"p"},"where")," clause. For reference, here's ",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.db-fiddle.com/f/5S2eqc65JYPNv6w1YL3HXS/1"}),"The equivalent SQL query"),"."),Object(i.b)("p",null,"We can take this a step forward and have it return every ",Object(i.b)("inlineCode",{parentName:"p"},"greeting-noun")," pair\nin the same language just by removing the given constrain of ",Object(i.b)("inlineCode",{parentName:"p"},'"en"'),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),'const Query = datalog.query(({ language, greeting, noun }) => {\n  Greetings({ language, greeting })\n  Nouns({ language, noun })\n})\n\nQuery.view().readAllData()\n// =>\n/*\n[\n  {\n    "language": "en",\n    "greeting": "Hello",\n    "noun": "world"\n  },\n  {\n    "language": "es",\n    "greeting": "Hola",\n    "noun": "todos"\n  }\n]\n*/\n')),Object(i.b)("p",null,"Notice we had to introduce a new ",Object(i.b)("inlineCode",{parentName:"p"},"language")," variable into the query function.\nThis is how Datalog knows which variable is a free variable whose value will be\ndetermined by the query and which one is already known."),Object(i.b)("p",null,"That's all there is to joins! Pretty straightforward if I do say so myself."))}u.isMDXComponent=!0},234:function(e,n,a){"use strict";(function(e){var n=a(198),t=a(235);try{void 0!==typeof window&&(window.datalog=n,window.useQuery=t.useQuery),void 0!==typeof e&&(e.datalog=n,e.useQuery=t.useQuery)}catch(o){}}).call(this,a(75))}}]);