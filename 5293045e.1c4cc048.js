(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{153:function(e,o,a){"use strict";a.r(o),a.d(o,"frontMatter",(function(){return s})),a.d(o,"metadata",(function(){return i})),a.d(o,"rightToc",(function(){return r})),a.d(o,"default",(function(){return m}));var n=a(1),t=a(9),l=(a(0),a(177)),s=(a(181),{id:"follows-in-common",title:"Follows in common",sidebar_label:"Follows in common"}),i={id:"examples/follows-in-common",title:"Follows in common",description:"import '../../src/globalDatalog'",source:"@site/docs/examples/follows-in-common.md",permalink:"/docs/examples/follows-in-common",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/examples/follows-in-common.md",sidebar_label:"Follows in common",sidebar:"docs",previous:{title:"Simple Join",permalink:"/docs/examples/simple-join"},next:{title:"Querying queries",permalink:"/docs/examples/querying-queries"}},r=[],c={rightToc:r};function m(e){var o=e.components,a=Object(t.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},c,a,{components:o,mdxType:"MDXLayout"}),Object(l.b)("p",null,"On Twitter and many other social networks there's a useful feature of showing\nyou which follows you have in common with another user. In this example we'll\nshow how to implement this as a simple Datalog query."),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"You can play along inside your browser's console!"))),Object(l.b)("p",null,"First we'll create the tables that hold our data. Notice that the data is not\nnested. This is a feature! Data is laid out flat, or normalized. This gives us\ngreater flexibility in querying data and prevents us from having to duplicate\ninformation across different parts of a deeply nested data structure since each\nrow in a table only holds the data that ",Object(l.b)("em",{parentName:"p"},"it")," cares about."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'// Already in the browser\'s scope\n// import * as datalog from \'@datalogui/datalog\'\n\n// Not actually needed for this example\nconst Users = datalog.intoTable([\n  { username: "daiyi" },\n  { username: "marco" },\n  { username: "noah" },\n  { username: "paul" }\n  // ...\n])\n\nconst Follows = datalog.intoTable([\n  { username: "marco", follows: "daiyi" },\n  { username: "noah",  follows: "daiyi" },\n  { username: "marco", follows: "paul" },\n  { username: "noah",  follows: "paul" },\n  { username: "marco", follows: "noah" },\n  { username: "noah",  follows: "marco" },\n  { username: "paul",  follows: "noah" },\n  // ...\n])\n')),Object(l.b)("p",null,"Simple enough. We have a table that defines the Users in this network, and\nanother table that defines who follows whom. Let's write a query that\nwill ask for myself (",Object(l.b)("inlineCode",{parentName:"p"},'"marco"'),") and ",Object(l.b)("inlineCode",{parentName:"p"},'"noah"'),", who do we both follow?"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'const Query = datalog.query(({commonFollow}) => {\n  Follows({username: "marco", follows: commonFollow})\n  Follows({username: "noah", follows: commonFollow})\n})\n\n// The Query variable represents the query, but if we want to see that data we\n// need to use the `.view()` method. The follow `.readAllData()` call returns\n// all the data from the query instead of just the recent results from any\n// recent changes.\nQuery.view().readAllData()\n\n// => [{"commonFollow":"daiyi"},{"commonFollow":"paul"}]\n')),Object(l.b)("p",null,"4 lines of code for a common followers query! not bad."))}m.isMDXComponent=!0},181:function(e,o,a){"use strict";(function(e){var o=a(183),n=a(186);try{"undefined"!=typeof window&&(window.datalog=o,window.useQuery=n.useQuery),void 0!==e&&(e.datalog=o,e.useQuery=n.useQuery)}catch(t){}console.log("Datalog is available in the console:",o)}).call(this,a(75))}}]);