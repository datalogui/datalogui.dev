"use strict";(self.webpackChunkdatalogui_dev=self.webpackChunkdatalogui_dev||[]).push([[736],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),s=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=n,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8819:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"terminology",title:"Terminology",sidebar_label:"Terminology"},u=void 0,s={unversionedId:"terminology",id:"terminology",title:"Terminology",description:"Glossary of terms used in Datalog UI",source:"@site/docs/Terminology.md",sourceDirName:".",slug:"/terminology",permalink:"/docs/terminology",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/Terminology.md",tags:[],version:"current",frontMatter:{id:"terminology",title:"Terminology",sidebar_label:"Terminology"},sidebar:"docs",previous:{title:"Bacon Numbers",permalink:"/docs/examples/bacon-numbers"}},c=[{value:"Glossary of terms used in Datalog UI",id:"glossary-of-terms-used-in-datalog-ui",children:[],level:2},{value:"Table",id:"table",children:[],level:2},{value:"Datum",id:"datum",children:[],level:2},{value:"Materialized Table",id:"materialized-table",children:[],level:2},{value:"Table View",id:"table-view",children:[],level:2},{value:"Query",id:"query",children:[],level:2}],d={toc:c};function p(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"glossary-of-terms-used-in-datalog-ui"},"Glossary of terms used in Datalog UI"),(0,o.kt)("p",null,"These terms have a a meaning outside of Datalog UI, but sometimes they have more then one meaning. This pages defines exactly what we mean by the words we use."),(0,o.kt)("h2",{id:"table"},"Table"),(0,o.kt)("p",null,"A data structure that stores rows of Datums. This is equivalent to a SQL table."),(0,o.kt)("h2",{id:"datum"},"Datum"),(0,o.kt)("p",null,"A piece of data that lives as a row in a table. I.e. an object ",(0,o.kt)("inlineCode",{parentName:"p"},"{foo: 1, bar: 2}")," in some Table with schema ",(0,o.kt)("inlineCode",{parentName:"p"},"{foo: NumberType, bar: NumberType}"),"."),(0,o.kt)("h2",{id:"materialized-table"},"Materialized Table"),(0,o.kt)("p",null,"A table that is created as the result of a Query. You can't assert/retract datums to it. This ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Materialized_view"},"Wikipedia")," entry applies."),(0,o.kt)("h2",{id:"table-view"},"Table View"),(0,o.kt)("p",null,"A Table View is one of the core abstractions in DatalogUI. It's how you read data from a Table or Materialized Table. It exposes the methods ",(0,o.kt)("inlineCode",{parentName:"p"},"recentData")," which returns data that is new since the last time you called ",(0,o.kt)("inlineCode",{parentName:"p"},"recentData"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"readAllData")," which reads all the data in the backing Table. If you ignore the differential part of Datalog UI, you can think of a Table View as providing you access to all the results of a query or rows in a Table. If you want to take advantage of the differential part of Datalog UI you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"recentData")," to give you only the changes since the last time you asked for data."),(0,o.kt)("h2",{id:"query"},"Query"),(0,o.kt)("p",null,"A Query is the pure function that you pass into ",(0,o.kt)("inlineCode",{parentName:"p"},"datalog.query"),". This function should be free of side effects. The function itself is run to understand the query declaration, but it is not run every time the query is run."))}p.isMDXComponent=!0}}]);