"use strict";(self.webpackChunkdatalogui_dev=self.webpackChunkdatalogui_dev||[]).push([[666],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},266:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"react",title:"React + Datalog",sidebar_label:"React + Datalog"},c=void 0,u={unversionedId:"react",id:"react",title:"React + Datalog",description:"How to use in React",source:"@site/docs/React.md",sourceDirName:".",slug:"/react",permalink:"/docs/react",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/React.md",tags:[],version:"current",frontMatter:{id:"react",title:"React + Datalog",sidebar_label:"React + Datalog"},sidebar:"docs",previous:{title:"Usage",permalink:"/docs/usage"},next:{title:"Simple Join",permalink:"/docs/examples/simple-join"}},s=[{value:"How to use in React",id:"how-to-use-in-react",children:[],level:2},{value:"useQuery",id:"usequery",children:[],level:2}],d={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-use-in-react"},"How to use in React"),(0,a.kt)("p",null,"There's a helper package called ",(0,a.kt)("inlineCode",{parentName:"p"},"@datalogui/react")," that includes a couple helpful hooks."),(0,a.kt)("p",null,"At the time of this writing there's just one:"),(0,a.kt)("h2",{id:"usequery"},"useQuery"),(0,a.kt)("p",null,"This hook returns all the data gathered from the query and will request a re-render when one of the query dependencies change."),(0,a.kt)("p",null,"Here's a typescript example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"interface TodoInterface {\n  id: string;\n  text: string;\n  isCompleted: boolean;\n}\n\n// Our main Todos table\nconst Todos = datalog.newTable<TodoInterface>({\n  id: datalog.StringType,\n  text: datalog.StringType,\n  isCompleted: datalog.BoolType\n})\n\n\nfunction AllTodos() {\n  // A simple query to return all the todos not completed\n  const todos = useQuery(({id, text}: TodoInterface) => {\n    Todos({id, text, isCompleted: false})\n  })\n\n  <div>\n    <h2>Your todos are:</h2>\n    {todos.map(todo => (<p key={todo.id}>{todo.text}</p>))}\n  </div>\n\n}\n")))}p.isMDXComponent=!0}}]);