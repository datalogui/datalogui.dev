"use strict";(self.webpackChunkdatalogui_dev=self.webpackChunkdatalogui_dev||[]).push([[382],{2862:function(e,n,o){var t=o(6913),r=o(4772);try{"undefined"!=typeof window&&(window.datalog=t,window.useQuery=r.useQuery),void 0!==o.g&&(o.g.datalog=t,o.g.useQuery=r.useQuery)}catch(a){}console.log("Datalog is available in the console:",t)},8878:function(e,n,o){o.r(n),o.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return m},default:function(){return b}});var t=o(7462),r=o(3366),a=(o(7294),o(3905)),c=(o(2862),["components"]),i={id:"bacon-numbers",title:"Bacon Numbers"},u=void 0,s={unversionedId:"examples/bacon-numbers",id:"examples/bacon-numbers",title:"Bacon Numbers",description:"Now for a more practical example. Bacon Numbers are the degrees of separation",source:"@site/docs/examples/bacon-numbers.md",sourceDirName:"examples",slug:"/examples/bacon-numbers",permalink:"/docs/examples/bacon-numbers",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/examples/bacon-numbers.md",tags:[],version:"current",frontMatter:{id:"bacon-numbers",title:"Bacon Numbers"},sidebar:"docs",previous:{title:"Recursive Queries",permalink:"/docs/examples/recursive-queries"},next:{title:"Terminology",permalink:"/docs/terminology"}},m=[],l={toc:m};function b(e){var n=e.components,o=(0,r.Z)(e,c);return(0,a.kt)("wrapper",(0,t.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'Now for a more practical example. Bacon Numbers are the degrees of separation\nfrom a given actor to Kevin Bacon. For example, if Elvis Presley was in "Change\nof Habit" with Edward Asner who was in "JFK" with Kevin Bacon, then Elvis\nPresley has a Bacon Number of 2. Let\'s see how we would use datalog to solve\nthis problem:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"live noInline",live:!0,noInline:!0},'const InMovie = datalog.intoTable([\n  { MovieName: "Change of Habit", Actor: "Elvis Presley" },\n  { MovieName: "Change of Habit", Actor: "Edward Asner" },\n  { MovieName: "Change of Habit", Actor: "Mary Tyler Moore" },\n  { MovieName: "Wild Things", Actor: "Robert Wagner" },\n  { MovieName: "JFK", Actor: "Edward Asner" },\n  { MovieName: "JFK", Actor: "Kevin Bacon" },\n  { MovieName: "Wild Things", Actor: "Kevin Bacon" },\n  // ... More Movies\n])\nconst BaconNumbers = datalog.intoTable([\n  { Actor: "Kevin Bacon", number: 0 },\n])\n\n// Initialize all actors with a bacon number of infinity\ndatalog.query(({ BaconNumber, Actor, NextActor, MovieName }) => {\n  InMovie({ Actor })\n  BaconNumbers.not({ Actor })\n}).view().readAllData().map(({ Actor }) => {\n  BaconNumbers.assert({ Actor, number: Infinity })\n})\n\nconst BaconNumberQuery = datalog.query(({ BaconNumber, Actor, NextActor, CurrentBaconNumber, MovieName }) => {\n  InMovie({ Actor, MovieName })\n  InMovie({ MovieName, Actor: NextActor })\n  BaconNumbers({ Actor, number: BaconNumber })\n  BaconNumbers({ Actor: NextActor, number: CurrentBaconNumber })\n})\n\nBaconNumberQuery.viewExt()\n  .mapEffect((recentDatum) => {\n    // If it\'s a join on the same actor, we\'ll pass\n    if (recentDatum.datum.Actor === recentDatum.datum.NextActor) {\n      return\n    }\n    switch (recentDatum.kind) {\n      case datalog.Added: {\n        const {\n          NextActor: Actor,\n          BaconNumber,\n          CurrentBaconNumber,\n        } = recentDatum.datum\n\n        if (CurrentBaconNumber > BaconNumber + 1) {\n          // We found a smaller bacon number. Let\'s swap out the datum\n          BaconNumbers.retract({ Actor, number: CurrentBaconNumber })\n          BaconNumbers.assert({ Actor, number: BaconNumber + 1 })\n        }\n        break\n      }\n      // Ignoring this for now\n      case datalog.Removed:\n        break;\n      case datalog.Modified:\n        throw new Error(\n          "Unhandled. We don\'t expect queries to give us a modified change."\n        )\n    }\n  })\n  .onChange(() => {\n    // After we\'ve mapped the effect, we\'ll run the query again to\n    // update our results\n    BaconNumberQuery.runQuery()\n  })\n\n// A simple component to show off our data\nconst BaconNumbersComponent = () => {\n  const baconNumbersView = useMemo(() => BaconNumbers.view(), [])\n  const [baconNumbers, updateBaconNumbers] = useState(baconNumbersView.readAllData())\n\n  // Update our local react state if the query changes\n  useEffect(() => {\n    return baconNumbersView.onChange(() => updateBaconNumbers(baconNumbersView.readAllData()))\n  }, [baconNumbersView])\n\n  return <pre>\n    {JSON.stringify(baconNumbers, null, 2)}\n  </pre>\n }\n\nrender(<BaconNumbersComponent />)\n')),(0,a.kt)("p",null,"The gist is that we use this query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const BaconNumberQuery = datalog.query(({ BaconNumber, Actor, NextActor, CurrentBaconNumber, MovieName }) => {\n  InMovie({ Actor, MovieName })\n  InMovie({ MovieName, Actor: NextActor })\n  BaconNumbers({ Actor, number: BaconNumber })\n  BaconNumbers({ Actor: NextActor, number: CurrentBaconNumber })\n})\n")),(0,a.kt)("p",null,"to find a link between an ",(0,a.kt)("inlineCode",{parentName:"p"},"Actor")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"NextActor"),". We also pull in their Bacon\nNumbers so we can compare if using the link to ",(0,a.kt)("inlineCode",{parentName:"p"},"Actor")," is better than using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"NextActor"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"CurrentBaconNumber"),". The comparison is done in ",(0,a.kt)("inlineCode",{parentName:"p"},"mapEffect"),". If\nthe link through ",(0,a.kt)("inlineCode",{parentName:"p"},"Actor")," is a better Bacon Number then we change ",(0,a.kt)("inlineCode",{parentName:"p"},"NextActor"),"'s\nBacon Number to be that."),(0,a.kt)("p",null,"As an exercise for the reader, try changing this so that it shows the trail of\nmovies too."))}b.isMDXComponent=!0}}]);