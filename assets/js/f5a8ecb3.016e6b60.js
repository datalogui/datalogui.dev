"use strict";(self.webpackChunkdatalogui_dev=self.webpackChunkdatalogui_dev||[]).push([[641],{2862:function(e,n,a){var t=a(6913),i=a(4772);try{"undefined"!=typeof window&&(window.datalog=t,window.useQuery=i.useQuery),void 0!==a.g&&(a.g.datalog=t,a.g.useQuery=i.useQuery)}catch(o){}console.log("Datalog is available in the console:",t)},1618:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var t=a(7462),i=a(3366),o=(a(7294),a(3905)),r=(a(2862),["components"]),s={id:"queries-with-negation",title:"Queries with negation"},d=void 0,l={unversionedId:"examples/queries-with-negation",id:"examples/queries-with-negation",title:"Queries with negation",description:"Sometimes it's useful to say find results for which there is no matching data",source:"@site/docs/examples/queries-with-negation.md",sourceDirName:"examples",slug:"/examples/queries-with-negation",permalink:"/docs/examples/queries-with-negation",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/examples/queries-with-negation.md",tags:[],version:"current",frontMatter:{id:"queries-with-negation",title:"Queries with negation"},sidebar:"docs",previous:{title:"Querying queries",permalink:"/docs/examples/querying-queries"},next:{title:"Recursive Queries",permalink:"/docs/examples/recursive-queries"}},u=[],m={toc:u};function c(e){var n=e.components,a=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes it's useful to say find results for which there is no matching data\nin a table. That's where the ",(0,o.kt)("inlineCode",{parentName:"p"},".not")," method becomes useful."),(0,o.kt)("p",null,"For example, if I wanted to find the actors who were in the movie ",(0,o.kt)("em",{parentName:"p"},"The Grand\nBudapest Hotel")," but not in the movie ",(0,o.kt)("em",{parentName:"p"},"Moonrise Kingdom")," the query would be:"),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Negation in queries can be tricky and error prone. Use with caution."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Create the InMovie Table with a schema\nconst InMovie = datalog.newTable({\n  actor: datalog.StringType,\n  movie: datalog.StringType,\n});\n\n\n// Load some data into the table\n[ "Ralph Fiennes",\n"F. Murray Abraham",\n"Mathieu Amalric",\n"Adrien Brody",\n"Willem Dafoe",\n"Jeff Goldblum",\n"Harvey Keitel",\n"Jude Law",\n"Bill Murray",\n"Edward Norton",\n"Saoirse Ronan",\n"Jason Schwartzman",\n"L\xe9a Seydoux",\n"Tilda Swinton",\n"Tom Wilkinson",\n"Owen Wilson",\n"Tony Revolori",\n"Larry Pine",\n].map(actor => ({actor, movie: "The Grand Budapest Hotel"})).forEach(datum => {\n  InMovie.assert(datum)\n});\n\n[\n"Bruce Willis",\n"Edward Norton",\n"Bill Murray",\n"Frances McDormand",\n"Tilda Swinton",\n"Jared Gilman",\n"Kara Hayward",\n"Jason Schwartzman",\n"Bob Balaban",\n"Lucas Hedges",\n"Charlie Kilgore",\n"Andreas Sheikh",\n"Chandler Frantz",\n"Rob H. Campbell",\n"L.J. Foley",\n].map(actor => ({actor, movie: "Moonrise Kingdom"})).forEach(datum => {\n  InMovie.assert(datum)\n});\n\n\n// Our query: find actors who were in _The Grand Budapest Hotel_ but not\n// _Moonrise Kingdom_\nconst Query = datalog.query(({actor}) => {\n  InMovie({actor, movie: "The Grand Budapest Hotel"})\n  InMovie.not({actor, movie: "Moonrise Kingdom"})\n})\n\nQuery.view().readAllData()\n// => \n/*\n[{"actor":"Adrien Brody"},{"actor":"F. Murray Abraham"},{"actor":"Harvey Keitel"},{"actor":"Jeff Goldblum"}, ...]\n*/\n')))}c.isMDXComponent=!0}}]);