"use strict";(self.webpackChunkdatalogui_dev=self.webpackChunkdatalogui_dev||[]).push([[830],{2862:function(e,n,a){var t=a(6913),o=a(4772);try{"undefined"!=typeof window&&(window.datalog=t,window.useQuery=o.useQuery),void 0!==a.g&&(a.g.datalog=t,a.g.useQuery=o.useQuery)}catch(i){}console.log("Datalog is available in the console:",t)},717:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return g},default:function(){return p}});var t=a(7462),o=a(3366),i=(a(7294),a(3905)),l=(a(2862),["components"]),r={id:"simple-join",title:"Simple Join",sidebar_label:"Simple Join"},s=void 0,u={unversionedId:"examples/simple-join",id:"examples/simple-join",title:"Simple Join",description:"Datalog allows you to express joins clearly and simply. You specify a join by",source:"@site/docs/examples/simple-join.md",sourceDirName:"examples",slug:"/examples/simple-join",permalink:"/docs/examples/simple-join",editUrl:"https://github.com/datalogui/datalogui.dev/edit/master/docs/examples/simple-join.md",tags:[],version:"current",frontMatter:{id:"simple-join",title:"Simple Join",sidebar_label:"Simple Join"},sidebar:"docs",previous:{title:"React + Datalog",permalink:"/docs/react"},next:{title:"Follows in common",permalink:"/docs/examples/follows-in-common"}},g=[],d={toc:g};function p(e){var n=e.components,a=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Datalog allows you to express joins clearly and simply. You specify a join by\nreferencing the same variable in multiple places in a query. Let's look at the\nhello world join as an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"live noInline",live:!0,noInline:!0},'// Already in the browser\'s scope\n// import * as datalog from \'@datalogui/datalog\'\n// import { useQuery } from \'@datalogui/react\'\n\nconst Greetings = datalog.intoTable([\n  { language: "en", greeting: "Hello" },\n  { language: "es", greeting: "Hola" }\n  // ...\n])\nconst Nouns = datalog.intoTable([\n  { language: "en", noun: "world" },\n  { language: "es", noun: "todos" }\n  // ...\n])\n\nconst Greeting = () => {\n  const results = useQuery(({ greeting, noun }) => {\n    Greetings({ language: "en", greeting })\n    Nouns({ language: "en", noun })\n  })\n  return results.map(({greeting, noun}) => `${greeting} ${noun}`)\n}\n\nrender(<Greeting />)\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The examples here use React, but they would work equally well with most other UI\nframeworks."))),(0,i.kt)("p",null,"A full working example above is nice, but let's zoom into the actual query part."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'datalog.query(({ greeting, noun }) => {\n  Greetings({ language: "en", greeting })\n  Nouns({ language: "en", noun })\n})\n')),(0,i.kt)("p",null,"In this query we are joining the datums from ",(0,i.kt)("inlineCode",{parentName:"p"},"Greetings")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Nouns")," when their\nlanguage are both ",(0,i.kt)("inlineCode",{parentName:"p"},'"en"'),". In case you're more familiar with SQL, this is\nanalogous to joining with a ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," clause. For reference, here's ",(0,i.kt)("a",{parentName:"p",href:"https://www.db-fiddle.com/f/5S2eqc65JYPNv6w1YL3HXS/1"},"The equivalent SQL query"),"."),(0,i.kt)("p",null,"We can take this a step forward and have it return every ",(0,i.kt)("inlineCode",{parentName:"p"},"greeting-noun")," pair\nin the same language just by removing the given constrain of ",(0,i.kt)("inlineCode",{parentName:"p"},'"en"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const Query = datalog.query(({ language, greeting, noun }) => {\n  Greetings({ language, greeting })\n  Nouns({ language, noun })\n})\n\nQuery.view().readAllData()\n// =>\n/*\n[\n  {\n    "language": "en",\n    "greeting": "Hello",\n    "noun": "world"\n  },\n  {\n    "language": "es",\n    "greeting": "Hola",\n    "noun": "todos"\n  }\n]\n*/\n')),(0,i.kt)("p",null,"Notice we had to introduce a new ",(0,i.kt)("inlineCode",{parentName:"p"},"language")," variable into the query function.\nThis is how Datalog knows which variable is a free variable whose value will be\ndetermined by the query and which one is already known."),(0,i.kt)("p",null,"That's all there is to joins! Pretty straightforward if I do say so myself."))}p.isMDXComponent=!0}}]);