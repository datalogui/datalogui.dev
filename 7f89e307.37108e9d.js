(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{157:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return a})),o.d(n,"metadata",(function(){return r})),o.d(n,"rightToc",(function(){return u})),o.d(n,"default",(function(){return c}));var s=o(1),t=o(9),i=(o(0),o(177)),a=(o(181),{id:"querying-queries",title:"Querying queries"}),r={id:"examples/querying-queries",title:"Querying queries",description:"import '../../src/globalDatalog'",source:"@site/docs/examples/querying-queries.md",permalink:"/docs/examples/querying-queries",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/examples/querying-queries.md",sidebar:"docs",previous:{title:"Follows in common",permalink:"/docs/examples/follows-in-common"},next:{title:"Queries with negation",permalink:"/docs/examples/queries-with-negation"}},u=[],l={rightToc:u};function c(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(i.b)("wrapper",Object(s.a)({},l,o,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Queries can be queried themselves. This is a useful for composing queries\ntogether."),Object(i.b)("p",null,"For example, imagine we are building a Twitter clone using datalog. We can\nbuild a User's timeline by querying ",Object(i.b)("inlineCode",{parentName:"p"},"Posts")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Follows"),". But what if we also\nwanted to keep track of the number of unseen posts in the timeline? We could\ncopy paste the original query and tweak it, or we could query our original\nquery!"),Object(i.b)("p",null,"Here's how it looks in practice:"),Object(i.b)("pre",null,Object(i.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts",metastring:"live noInline",live:!0,noInline:!0}),'// Define our tables and add some data into them.\nconst Follows = datalog.intoTable([\n  { username: "marco", follows: "daiyi" },\n  { username: "marco", follows: "noah" },\n  // ...\n])\n\nconst Posts = datalog.intoTable([\n  { username: "daiyi", content: "sourdough is a great buttermilk substitute! here\'s some sourdough cheddar cornbread", id: 0 },\n  { username: "noah", content: "the earliest glitch art is Renaissance humanists thinking that colorless paint statues were cool", id: 1 },\n  // ...\n])\n\nconst UnreadPosts = datalog.intoTable([\n  { messageID: 0 },\n  // ...\n])\n\n// Define our timeline query. Find every post from users I follow\nconst TimelineQueryFn = (username) => ({content, follows, messageID}) => {\n  Follows({username, follows})\n  Posts({username: follows, content, id: messageID})\n}\n\nconst Timeline = ({username, posts}) => {\n  return <>\n    <h3> {username}\'s Timeline: </h3>\n    {posts}\n  </>\n}\n\nconst Home = ({username}) => {\n  const TimelineQuery = TimelineQueryFn(username)\n  const posts = useQuery(TimelineQuery).map(({follows, content, messageID}) => {\n      return <p key={messageID}> {follows}: {content}</p>\n  })\n\n  const unreadCount = useQuery(({messageID}) => {\n    TimelineQuery({messageID})\n    UnreadPosts({messageID})\n  }).length\n  const pluralized = unreadCount === 1 ? \'post\' : \'posts\'\n\n\n  return <>\n    {unreadCount > 0 ? <h4>{unreadCount} new {pluralized}</h4> : null}\n    <Timeline username={username} posts={posts} />\n  </>\n\n}\n\nrender(<Home username="marco" />)\n')))}c.isMDXComponent=!0},181:function(e,n,o){"use strict";(function(e){var n=o(183),s=o(186);try{"undefined"!=typeof window&&(window.datalog=n,window.useQuery=s.useQuery),void 0!==e&&(e.datalog=n,e.useQuery=s.useQuery)}catch(t){}console.log("Datalog is available in the console:",n)}).call(this,o(75))}}]);